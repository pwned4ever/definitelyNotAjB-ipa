//
//  krw.m
//  escape
//
//  Created by Xiao on 2023/11/15.
//

#import "krw.h"
#import <Foundation/Foundation.h>
#import "libkfd.h"
#import "objcLogger.h"
#import "offsets.h"
#import "post_exp.h"

extern uint64_t __kfd;

uint8_t kread8(uint64_t where) {
    uint8_t out;
    kread(__kfd, where, &out, sizeof(uint8_t));
    return out;
}
uint32_t kread16(uint64_t where) {
    uint16_t out;
    kread(__kfd, where, &out, sizeof(uint16_t));
    return out;
}
uint32_t kread32(uint64_t where) {
    uint32_t out;
    kread(__kfd, where, &out, sizeof(uint32_t));
    return out;
}
uint64_t kread64(uint64_t where) {
    uint64_t out;
    kread(__kfd, where, &out, sizeof(uint64_t));
    return out;
}

//Thanks @jmpews
uint64_t kread64_smr(uint64_t where) {
    uint64_t value = kread64(where) | 0xffffff8000000000;
    if ((value & 0x400000000000) != 0)
        value &= 0xFFFFFFFFFFFFFFE0;
    return value;
}

void kwrite8(uint64_t where, uint8_t what) {
    uint8_t _buf[8] = {};
    _buf[0] = what;
    _buf[1] = kread8(where + 1);
    _buf[2] = kread8(where + 2);
    _buf[3] = kread8(where + 3);
    _buf[4] = kread8(where + 4);
    _buf[5] = kread8(where + 5);
    _buf[6] = kread8(where + 6);
    _buf[7] = kread8(where + 7);
    kwrite((u64)(__kfd), &_buf, where, sizeof(u64));
}

void kwrite16(uint64_t where, uint16_t what) {
    u16 _buf[4] = {};
    _buf[0] = what;
    _buf[1] = kread16(where + 2);
    _buf[2] = kread16(where + 4);
    _buf[3] = kread16(where + 6);
    kwrite((u64)(__kfd), &_buf, where, sizeof(u64));
}

void kwrite32(uint64_t where, uint32_t what) {
    u32 _buf[2] = {};
    _buf[0] = what;
    _buf[1] = kread32(where + 4);
    kwrite((u64)(__kfd), &_buf, where, sizeof(u64));
}

void kwrite64(uint64_t where, uint64_t what) {
    u64 _buf[1] = {};
    _buf[0] = what;
    kwrite((u64)(__kfd), &_buf, where, sizeof(u64));
}

void kread_string(uint64_t where, char *str) {
    for(int i = 0; i < 0x100; ++i) {
        str[i] = kread8(where + i);
        if(str[i] == '\0') break;
    }
    return;
}

uint64_t get_kernel_slide() {
    return ((struct kfd *)__kfd)->info.kernel.kernel_slide;
}

uint64_t get_kernel_cred() {
    return ((struct kfd *)__kfd)->info.kernel.kernel_proc;
}
